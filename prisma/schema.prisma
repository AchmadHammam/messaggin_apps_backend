generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                     Int                @id @unique @default(autoincrement())
  password               String
  nama                   String
  createdAt              DateTime           @default(now()) @map("created_at")
  createdBy              String             @map("created_by")
  updatedAt              DateTime           @default(now()) @updatedAt @map("updated_at")
  updatedBy              String             @map("updated_by")
  email                  String             @unique
  userChatPersonalRooms1 ChatPersonalRoom[]
  userChatPersonalRooms2 ChatPersonalRoom[] @relation("user2")
  UserScreet             UserScreet?
  UserWebSocket          UserWebSocket?
  senderChatMessages     ChatMessage[]      @relation("senderChatMessages")
  recevierChatMessages   ChatMessage[]      @relation("recevierChatMessages")
  readerChatMessages       ChatMessage[]

  @@map("users")
}

model ChatPersonalRoom {
  id            Int           @id @unique @default(autoincrement())
  code          String        @unique
  user1Id       Int           @map("user1_id")
  user2Id       Int           @map("user2_id")
  lastMessageAt DateTime      @default(now()) @map("last_message_at")
  lastMessageBy String        @map("last_message_by")
  createdAt     DateTime      @default(now()) @map("created_at")
  createdBy     String        @map("created_by")
  ChatMessage   ChatMessage[]
  user1         Users         @relation(fields: [user1Id], references: [id])
  user2         Users         @relation("user2", fields: [user2Id], references: [id])

  @@map("chat_personal_room")
}

model ChatMessage {
  id                 Int              @id @unique @default(autoincrement())
  chatPersonalRoomId Int              @map("chat_personal_room_id")
  readerId             Int              @map("reader_id")
  senderId           Int              @map("sender_id")
  receiverId         Int              @map("receiver_id")
  message            String
  createdAt          DateTime         @default(now()) @map("created_at")
  createdBy          String           @map("created_by")
  updatedAt          DateTime         @default(now()) @updatedAt @map("updated_at")
  updatedBy          String           @map("updated_by")
  isRead             Boolean          @default(false) @map("is_read")
  chatPersonalRoom   ChatPersonalRoom @relation(fields: [chatPersonalRoomId], references: [id])
  sender             Users            @relation("recevierChatMessages", fields: [senderId], references: [id])
  receiver           Users            @relation("senderChatMessages", fields: [receiverId], references: [id])
  user               Users            @relation(fields: [readerId], references: [id])

  @@map("chat_message")
}

model UserScreet {
  id        Int      @id @unique @default(autoincrement())
  publicKey String   @unique @map("public_key")
  userId    Int      @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")
  user      Users    @relation(fields: [userId], references: [id])

  @@map("user_screet")
}

model UserWebSocket {
  id        Int      @id @unique @default(autoincrement())
  userId    Int      @unique @map("user_id")
  socketId  String   @unique @map("socket_id")
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy String   @map("updated_by")
  user      Users    @relation(fields: [userId], references: [id])

  @@map("user_web_socket")
}

view chat_user_view {
  id                    Int?
  chat_personal_room_id Int?
  sender_id             Int?
  sender_name           String?
  receiver_id           Int?
  receiver_name         String?
  message               String?
  is_read               Boolean?
  created_at            DateTime?
  updated_at            DateTime?
}
